contract Identity =

  record date_time =
    {
      year : int,
      month : int,
      day : int,
      hour : int,
      minute : int,
      second : int,
      weekday : int
    }

  record state =
    {
      day_in_seconds : int,
      year_in_seconds : int,
      leap_year_in_seconds : int,
      hour_in_seconds : int,
      minute_in_seconds : int,
      origin_year : int
    }

  type months_day_count = map(int, int)

  public function init() : state =
    { day_in_seconds = 86400,
      year_in_seconds = 31536000,
      leap_year_in_seconds = 31622400,
      hour_in_seconds = 3600,
      minute_in_seconds = 60,
      origin_year = 1970 }

  public function is_leap_year(year : int) : bool =
    if(modulo(year, 4) != 0)
      false
    elif(modulo(year, 100) != 0)
      true
    elif(modulo(year, 400) != 0)
      false
    else
      true

  public function leap_years_before(year : int) : int =
    let year_sub = year - 1
    year_sub / 4 - year_sub / 100 + year_sub / 400

  public function get_days_in_month(month : int, year : int) : int =
    if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)
      31
    elif(month == 4 || month == 6 || month == 9 || month == 11)
      30
    elif(is_leap_year(year))
      29
    else
      28

  public function parse_timestamp(timestamp : int) : date_time =
    let dt : date_time = date_time_init()

    // year
    let dt = dt{ year = get_year(timestamp) }
    let buf : int = leap_years_before(dt.year) - leap_years_before(state.origin_year)

    let seconds_accounted_for = state.leap_year_in_seconds * buf +
      state.year_in_seconds * (dt.year - state.origin_year - buf)

    // month
    let (seconds_accounted_for, month') =
      determine_month(1, dt.year, timestamp, seconds_accounted_for)
    let dt = dt{ month = month' }

    // day
    let dt = dt{ day = determine_day(1, dt.month, dt.year, timestamp, seconds_accounted_for) }

    // hour
    let dt = dt{ hour = get_hour(timestamp) }

    // minute
    let dt = dt{ minute = get_minute(timestamp) }

    // second
    let dt = dt{ second = get_second(timestamp) }

    // day of week
    let dt = dt{ weekday = get_weekday(timestamp) }

    dt

  public function get_year(timestamp : int) : int =
    let year = state.origin_year + timestamp / state.year_in_seconds
    let num_leap_years = leap_years_before(year) - leap_years_before(state.origin_year)
    let seconds_accounted_for = state.leap_year_in_seconds * num_leap_years +
      state.year_in_seconds * (year - state.origin_year - num_leap_years)

    get_year'(timestamp, seconds_accounted_for, year)

  public function get_hour(timestamp : int) : int =
    modulo(timestamp / 60 / 60, 24)

  public function get_minute(timestamp : int) : int =
    modulo(timestamp / 60, 60)

  public function get_second(timestamp : int) : int =
    modulo(timestamp, 60)

  public function get_weekday(timestamp : int) : int =
    modulo(timestamp / state.day_in_seconds + 4, 7)

  public function to_timestamp(year : int, month : int, day : int) : int =
    to_timestamp'''(year, month, day, 0, 0, 0)

  public function to_timestamp'(year : int, month : int, day : int, hour : int) : int =
    to_timestamp'''(year, month, day, hour, 0, 0)

  public function to_timestamp''(year : int, month : int, day : int, hour : int, minute : int) : int =
    to_timestamp'''(year, month, day, hour, minute, 0)

  public function to_timestamp'''(year : int, month : int,
    day : int, hour : int, minute : int, second : int) : int =

    // year
    let timestamp = add_year_to_timestamp(state.origin_year, year, 0)

    // month
    let february_days_count =
      if(is_leap_year(year))
        29
      else
        28
    let months_day_count_map : months_day_count =
      { [0] = 31,
        [1] = february_days_count,
        [2] = 31,
        [3] = 30,
        [4] = 31,
        [5] = 30,
        [6] = 31,
        [7] = 31,
        [8] = 30,
        [9] = 31,
        [10] = 30,
        [11] = 31 }
    let timestamp = add_months_to_timestamp(1, month, months_day_count_map, timestamp)

    // day
    let timestamp = timestamp + state.day_in_seconds * (day - 1)

    // hour
    let timestamp = timestamp + state.hour_in_seconds * hour

    // minute
    let timestamp = timestamp + state.minute_in_seconds * minute

    // second
    let timestamp = timestamp + second

    timestamp

  private function add_year_to_timestamp(i : int, year : int, timestamp : int) : int =
    if(i >= year)
      timestamp
    else
      if(is_leap_year(i))
        add_year_to_timestamp(i + 1, year, timestamp + state.leap_year_in_seconds)
      else
        add_year_to_timestamp(i + 1, year, timestamp + state.year_in_seconds)

  private function add_months_to_timestamp(i : int, month : int,
    months_day_count_map : months_day_count, timestamp : int) : int =

    if(i >= month)
      timestamp
    else
      add_months_to_timestamp(i + 1, month,
        months_day_count_map, timestamp + state.day_in_seconds * months_day_count_map[i])

  private function get_year'(timestamp : int, seconds_accounted_for : int, year : int) : int =
    if(seconds_accounted_for =< timestamp)
      year
    else
      let year = year - 1
      let seconds_accounted_for =
        if(is_leap_year(year - 1))
          seconds_accounted_for - state.leap_year_in_seconds
        else
          seconds_accounted_for - state.year_in_seconds

      get_year'(timestamp, seconds_accounted_for, year - 1)

  private function determine_month(i : int,
    year : int, timestamp : int,
    seconds_accounted_for : int) : (int, int) =

    let month_valid : bool = i =< 12
    let seconds_in_month : int = state.day_in_seconds * get_days_in_month(i, year)
    let seconds_within_month : bool = seconds_in_month + seconds_accounted_for =< timestamp
    if(!month_valid || !seconds_within_month)
      (seconds_accounted_for, i)
    else
      determine_month(i + 1, year, timestamp, seconds_accounted_for + seconds_in_month)

  private function determine_day(i : int, month : int,
    year : int, timestamp : int, seconds_accounted_for : int) : int =

    let day_valid : bool = i =< get_days_in_month(month, year)
    let day_within_month = state.day_in_seconds + seconds_accounted_for =< timestamp
    if(!day_valid || !day_within_month)
      i
    else
      determine_day(i + 1, month, year, timestamp, seconds_accounted_for + state.day_in_seconds)

  private function date_time_init() : date_time =
    { year = state.origin_year,
      month = 0,
      day = 0,
      hour = 0,
      minute = 0,
      second = 0,
      weekday = 0 }

  private function modulo(num : int, divisor : int) : int =
    num - divisor * (num / divisor)
